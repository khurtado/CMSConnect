#! /bin/env python

import sys
import dashboard_report as report
import subprocess
import daemon
import htcondor
import re
import time

CondorSubmit = '/usr/bin/.condor_submit'
CondorRm = '/usr/bin/.condor_rm'

def print_condor(out, long_mode):
    if long_mode:
        print out
    else:
        for line in out.split('\n'):
            if 'marked for removal' in line:
                print line
    return

def retry(fct, args, kwargs, attempts=5):
    while attempts > 0:
        attempts -= 1
        try:
            return fct(*args, **kwargs)
        except:
            if attempts <= 0:
                raise
            time.sleep(1)

def condor_history(schedd, constraint, classads, match):
        history = schedd.history(constraint, classads, match)
        try:
            classads = history.next()
        except:
            raise ValueError('Could not get classad attributes for:{0}'.format(constraint))

        return classads


def report_jobs(out, state):
    """Get list of jobs sucessfully deleted and report them
    to dashboard
    """
    schedd = htcondor.Schedd()
    cluster_re = re.compile(r'job_(\d+)_(\d+) = 1')
    for iter in cluster_re.finditer(out):
        clusterid, procid = iter.groups()
        try:
            #classlist = retry(condor_history, schedd,
            #        'ClusterId =?= {0} && ProcId =?= {1}'.format(clusterid, procid),
            #        ['Dashboard_Id', 'Dashboard_taskid'], 1, attempts=5)
            #classlist = condor_history(schedd,
            #        'ClusterId =?= {0} && ProcId =?= {1}'.format(clusterid, procid),
            #        ['Dashboard_Id', 'Dashboard_taskid'], 1)
            history_args = (schedd, 'ClusterId =?= {0} && ProcId =?= {1}'.format(clusterid, procid),
                    ['Dashboard_Id', 'Dashboard_taskid'], 1)
            classlist = retry(condor_history, history_args, {})
            Dashboard_Id = classlist['Dashboard_Id']
            Dashboard_taskid = classlist['Dashboard_taskid']
            # Now, report as Killed
            # Get monitor object and kill jobId
            monitor = report.Monitor(Dashboard_taskid)
            monitor.update_job(str(Dashboard_Id), str(state))
        except:
            print "Could not report: {0}.{1}".format(clusterid, procid)
            pass

    return

if __name__ == "__main__":
    # Append -long to condor_rm through subprocess
    list_nargs = [CondorRm]

    long_mode = False
    for arg in sys.argv[1:]:
        if arg=='-long':
            long_mode = True
        list_nargs += [str(arg)]

    if not long_mode:
        list_nargs += ['-long']

    p = subprocess.Popen(list_nargs, stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)

    out, err = p.communicate()
    if p.returncode != 0:
        raise ValueError(err)

    print_condor(out, long_mode)

    with daemon.DaemonContext(stdout=sys.stdout, stderr=sys.stderr):
        # Report jobs to Dashboard as Killed
        report_jobs(out, 'Killed')
